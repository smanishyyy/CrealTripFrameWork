Enumerations serve the purpose of representing a group of named 
constants in a programming language. For example the 4 suits in a deck of playing cards
 may be 4 enumerators named Club, Diamond, Heart, and Spade, belonging to an enumerated type named Suit. Other examples include natural enumerated types (like the planets, days of the week, colors, directions, etc.).
Enums are used when we know all possible values at compile time, such as choices on a menu,
 rounding modes, command line flags, etc. It is not necessary that the set of constants in 
 an enum type stay fixed for all time.

In Java (from 1.5), enums are represented using enum data type. Java enums are more 
powerful than C/C++ enums . In Java, we can also add variables, methods and constructors to it
. The main objective of enum is to define our own data types(Enumerated Data Types).

First line inside enum should be list of constants and then other things like methods, 
variables and constructor.

According to Java naming conventions, it is recommended that we name constant with all 
capital letters

Every enum internally implemented by using Class

class Color
{
     public static final Color RED = new Color();
     public static final Color BLUE = new Color();
     public static final Color GREEN = new Color();
}*/


Enum and Inheritance :

All enums implicitly extend java.lang.Enum class. As a class can only extend 
one parent in Java, so an enum cannot extend anything else.
toString() method is overridden in java.lang.Enum class,which returns enum constant name.
enum can implement many interfaces.


values(), ordinal() and valueOf() methods :

These methods are present inside java.lang.Enum.
values() method can be used to return all values present inside enum.
Order is important in enums.By using ordinal() method, each enum constant index can
 be found, just like array index.
valueOf() method returns the enum constant of the specified string value, if exists